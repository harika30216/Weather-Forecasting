{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMyrSZ/AthBU+8Icg0zpewa"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OaF9ex-5jP_B","executionInfo":{"status":"ok","timestamp":1720101578696,"user_tz":-330,"elapsed":4817,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}},"outputId":"ae930178-b260-4f78-cea7-81a4c172f8c8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import os\n","\n","# Provide the source folder\n","src_folder = \"/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets\"\n","# Provide the destination folder\n","dest_folder = \"/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Test\""],"metadata":{"id":"zX6Wl_Oq9z_v","executionInfo":{"status":"ok","timestamp":1720101582245,"user_tz":-330,"elapsed":431,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["# Find all subfolders in the source folder src_folder\n","directory_contents = os.listdir(src_folder)\n","print('directory_contents: ', directory_contents)\n","\n","# Append the path of the src_folder with the sub-folders\n","sub_folders = []\n","for item in directory_contents:\n","  if os.path.isdir(os.path.join(src_folder,item)):\n","    sub_folders.append(item)\n","print('sub_folders: ', sub_folders)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z8KDsnjv-Ej2","executionInfo":{"status":"ok","timestamp":1720101585159,"user_tz":-330,"elapsed":524,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}},"outputId":"020c618b-9b56-4374-d47e-38071ef2ca57"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["directory_contents:  ['lightning', 'rain']\n","sub_folders:  ['lightning', 'rain']\n"]}]},{"cell_type":"code","source":["import os\n","\n","# Create the same folder structure in destination\n","for folder_name in sub_folders:\n","  # Check if the directory already exists\n","  if not os.path.exists(os.path.join(dest_folder,folder_name)):\n","    os.mkdir(os.path.join(dest_folder,folder_name)) # Create the directory only if it doesn't exist"],"metadata":{"id":"t4GLRstK-I5I","executionInfo":{"status":"ok","timestamp":1720101587521,"user_tz":-330,"elapsed":455,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["# List full paths of all images in each category/sub-folder\n","list_files = []\n","# Find all the files, note that you have to change it to tif if that is the extension\n","for folder_name in directory_contents:\n","  files_list = [_ for _ in os.listdir(os.path.join(src_folder, folder_name))]\n","  # Create the list with full path\n","  full_path_files_list = []\n","  for file_name in files_list:\n","    full_path_files_list.append(os.path.join(src_folder, folder_name, file_name))\n","  list_files.append(full_path_files_list)\n","print(list_files[1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DnYgK4DK-NlJ","executionInfo":{"status":"ok","timestamp":1720101590676,"user_tz":-330,"elapsed":759,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}},"outputId":"8a4ccbae-874b-4710-c61d-a8a5e8182bcb"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["['/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1824.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1819.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1722.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1743.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1771.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1796.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1755.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1787.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1742.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1776.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1758.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1769.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1784.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1721.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1727.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1814.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1726.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1759.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1746.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1805.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1766.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1783.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1756.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1735.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1750.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1730.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1741.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1798.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1732.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1816.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1817.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1825.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1772.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1804.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1815.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1791.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1802.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1779.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1823.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1775.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1826.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1774.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1803.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1748.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1773.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1786.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1767.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1719.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1744.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1810.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1731.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1728.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1812.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1770.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1762.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1737.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1752.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1736.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1733.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1723.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1751.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1734.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1729.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1749.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1818.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1801.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1820.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1807.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1768.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1790.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1797.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1763.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1828.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1745.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1800.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1760.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1780.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1789.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1757.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1739.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1720.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1725.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1765.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1781.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1738.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1754.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1747.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1753.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1764.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1777.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1740.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1792.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1827.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1799.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1822.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1782.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1795.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1794.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1806.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1813.jpg']\n"]}]},{"cell_type":"code","source":["import random\n","\n","# Specify the fraction\n","#this is the splitting percentage. 10% will be sent to validation\n","x = 20\n","\n","for files_list in list_files:\n","  # length of the list\n","  list_len = len(files_list)\n","  # length of x%\n","  frac_len = int(list_len * (x/100))\n","  # select x% of files\n","  files_to_move = random.sample(files_list, frac_len)\n","  for single_file in files_to_move:\n","    # extract the sub-string with subfolder/category and file name\n","    subfolder_file = '/'.join(single_file.split('/')[-2:])\n","    # destination path\n","    dst_folder = os.path.join(dest_folder, subfolder_file)\n","    # Move the file\n","    os.replace(single_file, dst_folder)"],"metadata":{"id":"eGud8sJi-RBJ","executionInfo":{"status":"ok","timestamp":1720101593400,"user_tz":-330,"elapsed":470,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["for folder_name in sub_folders:\n","  print(folder_name, len(os.listdir(os.path.join(dest_folder,folder_name))))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZzapkcbO-UVZ","executionInfo":{"status":"ok","timestamp":1720101597840,"user_tz":-330,"elapsed":1530,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}},"outputId":"043e09d3-4cdb-4624-da43-3eed363353f2"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["lightning 20\n","rain 20\n"]}]},{"cell_type":"code","source":["import os\n","\n","# Provide the source folder\n","src_folder = \"/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets\"\n","# Provide the destination folder\n","dest_folder = \"/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Valid\""],"metadata":{"id":"XcfBoVy5-Y-_","executionInfo":{"status":"ok","timestamp":1720101601424,"user_tz":-330,"elapsed":504,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["# Find all subfolders in the source folder src_folder\n","directory_contents = os.listdir(src_folder)\n","print('directory_contents: ', directory_contents)\n","\n","# Append the path of the src_folder with the sub-folders\n","sub_folders = []\n","for item in directory_contents:\n","  if os.path.isdir(os.path.join(src_folder,item)):\n","    sub_folders.append(item)\n","print('sub_folders: ', sub_folders)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6cCJpPPE-mcU","executionInfo":{"status":"ok","timestamp":1720101605229,"user_tz":-330,"elapsed":724,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}},"outputId":"d048f020-8bfa-4fa9-98e7-67b7d32c1ea7"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["directory_contents:  ['lightning', 'rain']\n","sub_folders:  ['lightning', 'rain']\n"]}]},{"cell_type":"code","source":["import os\n","\n","# Create the same folder structure in destination\n","for folder_name in sub_folders:\n","  # Check if the directory already exists\n","  if not os.path.exists(os.path.join(dest_folder,folder_name)):\n","    os.mkdir(os.path.join(dest_folder,folder_name)) # Create the directory only if it doesn't exist"],"metadata":{"id":"Kr6mV0x1-qCy","executionInfo":{"status":"ok","timestamp":1720101608365,"user_tz":-330,"elapsed":10,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["# List full paths of all images in each category/sub-folder\n","list_files = []\n","# Find all the files, note that you have to change it to tif if that is the extension\n","for folder_name in directory_contents:\n","  files_list = [_ for _ in os.listdir(os.path.join(src_folder, folder_name))]\n","  # Create the list with full path\n","  full_path_files_list = []\n","  for file_name in files_list:\n","    full_path_files_list.append(os.path.join(src_folder, folder_name, file_name))\n","  list_files.append(full_path_files_list)\n","print(list_files[1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pLNvNdto-syB","executionInfo":{"status":"ok","timestamp":1720101611311,"user_tz":-330,"elapsed":9,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}},"outputId":"d59f3dab-efdd-4625-8afc-31b6118c7ccb"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["['/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1824.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1722.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1743.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1771.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1796.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1755.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1787.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1742.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1776.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1784.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1721.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1727.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1726.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1759.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1746.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1805.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1766.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1756.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1735.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1750.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1730.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1741.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1798.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1732.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1817.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1825.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1772.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1804.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1815.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1791.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1802.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1779.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1775.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1826.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1774.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1803.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1748.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1773.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1786.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1767.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1744.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1731.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1728.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1812.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1770.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1737.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1752.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1736.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1733.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1734.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1749.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1818.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1820.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1807.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1797.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1763.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1828.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1745.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1800.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1760.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1780.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1789.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1757.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1739.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1765.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1781.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1738.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1754.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1747.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1753.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1764.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1777.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1740.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1792.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1827.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1782.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1795.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1794.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1806.jpg', '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets/rain/1813.jpg']\n"]}]},{"cell_type":"code","source":["import random\n","\n","# Specify the fraction\n","#this is the splitting percentage. 10% will be sent to validation\n","x = 20\n","\n","for files_list in list_files:\n","  # length of the list\n","  list_len = len(files_list)\n","  # length of x%\n","  frac_len = int(list_len * (x/100))\n","  # select x% of files\n","  files_to_move = random.sample(files_list, frac_len)\n","  for single_file in files_to_move:\n","    # extract the sub-string with subfolder/category and file name\n","    subfolder_file = '/'.join(single_file.split('/')[-2:])\n","    # destination path\n","    dst_folder = os.path.join(dest_folder, subfolder_file)\n","    # Move the file\n","    os.replace(single_file, dst_folder)"],"metadata":{"id":"9UwrKuxj-vv2","executionInfo":{"status":"ok","timestamp":1720101615349,"user_tz":-330,"elapsed":671,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["for folder_name in sub_folders:\n","  print(folder_name, len(os.listdir(os.path.join(dest_folder,folder_name))))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7cKbDyEr-00h","executionInfo":{"status":"ok","timestamp":1720101619355,"user_tz":-330,"elapsed":784,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}},"outputId":"5fae8f14-e916-4457-e6e3-6f02e00649ae"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["lightning 16\n","rain 16\n"]}]},{"cell_type":"code","source":["\n","# Please replace the brackets below with the drive location of your folders which included subfolders for images\n","# Sample path: /content/drive/My Drive/ImageClassification\n","TRAINING_PATH = '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Train/Datasets'\n","VALIDATION_PATH = '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Valid'"],"metadata":{"id":"rdY1V7cy-2U9","executionInfo":{"status":"ok","timestamp":1720101623133,"user_tz":-330,"elapsed":4,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["def create_model(base_model, num_classes):\n","    import tensorflow as tf\n","    # Grab the last layer and add a few extra layers to it\n","    x=base_model.output\n","    x=GlobalAveragePooling2D()(x)\n","    # Dense layer 1\n","    x=tf.keras.layers.Dense(100,activation='relu', kernel_initializer=tf.keras.initializers.VarianceScaling(), use_bias=True)(x)\n","\n","    # Final layer with softmax activation\n","    preds=tf.keras.layers.Dense(num_classes,activation='softmax', kernel_initializer=tf.keras.initializers.VarianceScaling(), use_bias=False)(x)\n","\n","    # Create the final model\n","    model=Model(inputs=base_model.input,outputs=preds)\n","    return model\n"],"metadata":{"id":"EPeRkRPh_Cth","executionInfo":{"status":"ok","timestamp":1720101626531,"user_tz":-330,"elapsed":458,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["def get_optimizer(optimizer_name, learning_rate):\n","    # Import keras optimizers\n","    from tensorflow.keras.optimizers import Adam, Adadelta, Adagrad, Adamax, Ftrl, Nadam, RMSprop, SGD\n","    print('Selected Optimizer', optimizer_name)\n","    switcher = {\n","        'Adadelta': Adadelta(learning_rate=learning_rate),\n","        'Adagrad': Adagrad(learning_rate=learning_rate),\n","        'Adam': Adam(learning_rate=learning_rate),\n","        'Adamax': Adamax(learning_rate=learning_rate),\n","        'FTRL': Ftrl(learning_rate=learning_rate),\n","        'NAdam': Nadam(learning_rate=learning_rate),\n","        'RMSprop': RMSprop(learning_rate=learning_rate),\n","        'Gradient Descent': SGD(learning_rate=learning_rate)\n","    }\n","    # If optimizer_name is empty, Adam will be return as default optimizer\n","    return switcher.get(optimizer_name, Adam(learning_rate=learning_rate))\n"],"metadata":{"id":"GM0dSxF2_HWD","executionInfo":{"status":"ok","timestamp":1720101629594,"user_tz":-330,"elapsed":490,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","import os\n","import tensorflow as tf\n","\n","from keras.applications.mobilenet_v2 import preprocess_input\n","from keras.preprocessing.image import ImageDataGenerator\n","from keras.layers import Dense, GlobalAveragePooling2D\n","from keras.models import Model\n","from tensorflow.keras import regularizers\n","from tensorflow.keras.preprocessing import image_dataset_from_directory\n","from keras.callbacks import EarlyStopping\n","from tensorflow import keras\n","\n","epochs = 30\n","base_learning_rate = 0.00001\n","optimizer = 'Adam'\n","BATCH_SIZE = 16\n","IMG_SIZE = (224, 224)\n","\n","train_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)\n","validation_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)\n","\n","train_generator = train_datagen.flow_from_directory(TRAINING_PATH,\n","                                                   target_size=IMG_SIZE,\n","                                                   color_mode='rgb',\n","                                                   batch_size=BATCH_SIZE,\n","                                                   class_mode='categorical',\n","                                                   shuffle=True)\n","\n","validation_generator = validation_datagen.flow_from_directory(VALIDATION_PATH,\n","                                                             target_size=IMG_SIZE,\n","                                                             color_mode='rgb',\n","                                                             batch_size=BATCH_SIZE,\n","                                                             class_mode='categorical',\n","                                                             shuffle=True)\n","\n","base_model = keras.applications.ResNet50(\n","    include_top=False,\n","    weights=\"imagenet\",\n","    input_shape=(224, 224, 3)\n",")\n","\n","for layer in base_model.layers:\n","    layer.trainable=False\n","\n","#base_model = keras.applications.ResNet50(\n"," #   include_top=False,  # Remove the top classification layers\n","  #  weights=\"imagenet\",\n","   # input_shape=(224, 224, 3)\n","#)\n","model = create_model(base_model, len(train_generator.class_indices))\n","model.compile(optimizer=get_optimizer(optimizer, base_learning_rate),\n","              loss='categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n","history_fine = model.fit(train_generator,\n","                         epochs=epochs,\n","                         validation_data=validation_generator,\n","                         verbose=1)\n","early_stopping_monitor = EarlyStopping(\n","    monitor='val_loss',\n","    min_delta=0,\n","    patience=30,\n","    verbose=0,\n","    mode='auto',\n","    baseline=None,\n","    restore_best_weights=True\n",")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3rgliQoD_Igi","executionInfo":{"status":"ok","timestamp":1720113320675,"user_tz":-330,"elapsed":880219,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}},"outputId":"bf41d114-484c-4c8f-a9a9-f74a6cba6cc3"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 128 images belonging to 2 classes.\n","Found 32 images belonging to 2 classes.\n","Selected Optimizer Adam\n","Epoch 1/30\n","8/8 [==============================] - 33s 4s/step - loss: 0.7548 - accuracy: 0.5000 - val_loss: 0.7691 - val_accuracy: 0.5000\n","Epoch 2/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.7384 - accuracy: 0.5000 - val_loss: 0.7541 - val_accuracy: 0.5000\n","Epoch 3/30\n","8/8 [==============================] - 31s 4s/step - loss: 0.7244 - accuracy: 0.5000 - val_loss: 0.7406 - val_accuracy: 0.5000\n","Epoch 4/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.7114 - accuracy: 0.5000 - val_loss: 0.7288 - val_accuracy: 0.5000\n","Epoch 5/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.6984 - accuracy: 0.5000 - val_loss: 0.7198 - val_accuracy: 0.5000\n","Epoch 6/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.6893 - accuracy: 0.5000 - val_loss: 0.7116 - val_accuracy: 0.5000\n","Epoch 7/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.6802 - accuracy: 0.5000 - val_loss: 0.7048 - val_accuracy: 0.5000\n","Epoch 8/30\n","8/8 [==============================] - 31s 4s/step - loss: 0.6730 - accuracy: 0.5000 - val_loss: 0.6988 - val_accuracy: 0.5000\n","Epoch 9/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.6665 - accuracy: 0.5000 - val_loss: 0.6933 - val_accuracy: 0.5000\n","Epoch 10/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.6605 - accuracy: 0.5000 - val_loss: 0.6889 - val_accuracy: 0.5000\n","Epoch 11/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.6551 - accuracy: 0.5000 - val_loss: 0.6852 - val_accuracy: 0.5000\n","Epoch 12/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.6505 - accuracy: 0.5000 - val_loss: 0.6816 - val_accuracy: 0.5000\n","Epoch 13/30\n","8/8 [==============================] - 32s 4s/step - loss: 0.6463 - accuracy: 0.5000 - val_loss: 0.6784 - val_accuracy: 0.4688\n","Epoch 14/30\n","8/8 [==============================] - 32s 4s/step - loss: 0.6430 - accuracy: 0.5391 - val_loss: 0.6753 - val_accuracy: 0.5312\n","Epoch 15/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.6387 - accuracy: 0.6484 - val_loss: 0.6727 - val_accuracy: 0.6250\n","Epoch 16/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.6351 - accuracy: 0.7031 - val_loss: 0.6702 - val_accuracy: 0.6562\n","Epoch 17/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.6317 - accuracy: 0.7500 - val_loss: 0.6678 - val_accuracy: 0.6562\n","Epoch 18/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.6287 - accuracy: 0.7969 - val_loss: 0.6654 - val_accuracy: 0.7188\n","Epoch 19/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.6253 - accuracy: 0.8125 - val_loss: 0.6635 - val_accuracy: 0.7188\n","Epoch 20/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.6223 - accuracy: 0.8203 - val_loss: 0.6616 - val_accuracy: 0.7188\n","Epoch 21/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.6195 - accuracy: 0.8281 - val_loss: 0.6597 - val_accuracy: 0.7188\n","Epoch 22/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.6165 - accuracy: 0.8281 - val_loss: 0.6579 - val_accuracy: 0.7188\n","Epoch 23/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.6136 - accuracy: 0.8359 - val_loss: 0.6560 - val_accuracy: 0.7812\n","Epoch 24/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.6108 - accuracy: 0.8281 - val_loss: 0.6543 - val_accuracy: 0.7812\n","Epoch 25/30\n","8/8 [==============================] - 31s 4s/step - loss: 0.6080 - accuracy: 0.8281 - val_loss: 0.6525 - val_accuracy: 0.7188\n","Epoch 26/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.6054 - accuracy: 0.8438 - val_loss: 0.6509 - val_accuracy: 0.7188\n","Epoch 27/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.6026 - accuracy: 0.8438 - val_loss: 0.6495 - val_accuracy: 0.7188\n","Epoch 28/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.6001 - accuracy: 0.8438 - val_loss: 0.6479 - val_accuracy: 0.7188\n","Epoch 29/30\n","8/8 [==============================] - 28s 4s/step - loss: 0.5977 - accuracy: 0.8359 - val_loss: 0.6463 - val_accuracy: 0.7188\n","Epoch 30/30\n","8/8 [==============================] - 31s 4s/step - loss: 0.5953 - accuracy: 0.8281 - val_loss: 0.6445 - val_accuracy: 0.7188\n"]}]},{"cell_type":"code","source":["import os\n","\n","MODEL_PATH = \"/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Best Model\"\n","MODEL_NAME = \"Wether_forecasting_model_30_0.01.h5\"\n","model.save(os.path.join(MODEL_PATH, MODEL_NAME))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AXDWXjrNsrAW","executionInfo":{"status":"ok","timestamp":1720113706050,"user_tz":-330,"elapsed":1102,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}},"outputId":"284d5d87-f25b-4a43-b42d-f32d30770da6"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n","  saving_api.save_model(\n"]}]},{"cell_type":"code","source":["def visualization():\n","    import pandas as pd\n","    df = pd.DataFrame(history_fine.history)\n","    #loss plots\n","    plt.figure(figsize=(8,8))\n","    plt.plot(df['loss'], color='red', label = \"Training_loss\")\n","    plt.plot(df['val_loss'], color='blue')\n","    plt.legend(['Training Loss','Validation loss'],loc = 'best' )\n","    plt.title('Line plot of Training and Validation loss')\n","    plt.ylim(0,1)\n","    plt.show()\n","\n","    #accuracy plots\n","    plt.figure(figsize=(8,8))\n","    plt.plot(df['accuracy'], color='red')\n","    plt.plot(df['val_accuracy'], color='blue')\n","    plt.legend(['Training acc','Validation acc'],loc = 'best' )\n","    plt.title('Line plot of Training and Validation Accuracies')\n","    plt.ylim(0,1)\n","    plt.show()\n","\n","visualization()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"ze4Qt_vDsrvt","executionInfo":{"status":"ok","timestamp":1720113710208,"user_tz":-330,"elapsed":1545,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}},"outputId":"31553bd4-13df-44fc-c24c-c5b35a965ca4"},"execution_count":40,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["\n","# Import numpy for calculating best model accuracy\n","import numpy as np\n","# Populating matrics -> accuracy & loss\n","acc = history_fine.history['accuracy']\n","val_acc = history_fine.history['val_accuracy']\n","\n","loss = history_fine.history['loss']\n","val_loss = history_fine.history['val_loss']\n","\n","print('Training Accuracy: ', acc)\n","print('Validation Accuracy: ', val_acc)\n","print('Training Loss: ', loss)\n","print('Validation Loss: ', val_loss)\n","best_model_accuracy = history_fine.history['val_accuracy'][np.argmin(history_fine.history['val_loss'])]\n","print('best model accuracy: ', best_model_accuracy)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"grd3EU2TsvJS","executionInfo":{"status":"ok","timestamp":1720113825911,"user_tz":-330,"elapsed":447,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}},"outputId":"3f16aa64-4662-4b79-ec32-5b299574b02d"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["Training Accuracy:  [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5390625, 0.6484375, 0.703125, 0.75, 0.796875, 0.8125, 0.8203125, 0.828125, 0.828125, 0.8359375, 0.828125, 0.828125, 0.84375, 0.84375, 0.84375, 0.8359375, 0.828125]\n","Validation Accuracy:  [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.46875, 0.53125, 0.625, 0.65625, 0.65625, 0.71875, 0.71875, 0.71875, 0.71875, 0.71875, 0.78125, 0.78125, 0.71875, 0.71875, 0.71875, 0.71875, 0.71875, 0.71875]\n","Training Loss:  [0.7548443078994751, 0.7384252548217773, 0.7244152426719666, 0.711407482624054, 0.6983677744865417, 0.689259946346283, 0.6801832318305969, 0.6729612946510315, 0.6664925813674927, 0.6605148911476135, 0.6551238298416138, 0.6504716873168945, 0.646316647529602, 0.6429506540298462, 0.6386591792106628, 0.635053277015686, 0.6316629648208618, 0.6287481188774109, 0.6252528429031372, 0.6223124861717224, 0.6194510459899902, 0.616452693939209, 0.613603949546814, 0.6107717752456665, 0.6080477833747864, 0.6054033637046814, 0.6026369333267212, 0.6001181602478027, 0.5976836681365967, 0.5952579975128174]\n","Validation Loss:  [0.7691158652305603, 0.7541364431381226, 0.7406006455421448, 0.7288414239883423, 0.7198185920715332, 0.7115817666053772, 0.7047792077064514, 0.6988108158111572, 0.6932764053344727, 0.6888565421104431, 0.6851794719696045, 0.6816073656082153, 0.6784275770187378, 0.6752870082855225, 0.6726899147033691, 0.670218825340271, 0.6677778959274292, 0.665355920791626, 0.6634726524353027, 0.6615579128265381, 0.6597422361373901, 0.6579408645629883, 0.6560343503952026, 0.6543147563934326, 0.6524519920349121, 0.6509190797805786, 0.649493932723999, 0.647896409034729, 0.6463491916656494, 0.6445274949073792]\n","best model accuracy:  0.71875\n"]}]},{"cell_type":"code","source":["def seperate_labels(generator):\n","    x_validation = []\n","    y_validation = []\n","    num_seen = 0\n","\n","    for x, labels in generator:\n","        x_validation.append(x)\n","        y_validation.append([argmax(label) for label in labels])\n","        num_seen += len(x)\n","        if num_seen == generator.n: break\n","\n","    x_validation = np.concatenate(x_validation)\n","    y_validation = np.concatenate(y_validation)\n","    return x_validation, y_validation\n"],"metadata":{"id":"k3VeJu4bszdU","executionInfo":{"status":"ok","timestamp":1720113830084,"user_tz":-330,"elapsed":463,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}}},"execution_count":42,"outputs":[]},{"cell_type":"code","source":["\n","# Calculate and display the confusion matrix\n","import matplotlib.pyplot as plt\n","from numpy.core.fromnumeric import argmax\n","from sklearn.metrics import ConfusionMatrixDisplay\n","\n","x_validation, y_validation = seperate_labels(validation_generator)\n","y_pred = model.predict(x_validation, batch_size=BATCH_SIZE)\n","predictions = np.apply_along_axis(argmax, 1, y_pred)\n","display_labels = validation_generator.class_indices.keys()\n","\n","# ConfusionMatrixDisplay.from_predictions(y_validation, predictions, display_labels=display_labels, cmap=\"binary\")\n","# plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yRtdz7Xfs2to","executionInfo":{"status":"ok","timestamp":1720113842224,"user_tz":-330,"elapsed":8265,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}},"outputId":"8c08d5ba-4c05-4823-8041-9b2a3d279bd8"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 6s 3s/step\n"]}]},{"cell_type":"code","source":["import seaborn as sns\n","from sklearn.metrics import confusion_matrix, classification_report\n","plt.figure(figsize = (5,5))\n","sns.heatmap(confusion_matrix(y_validation, predictions), annot = True, fmt = 'g', cmap = \"Blues\",xticklabels=display_labels, yticklabels=display_labels)\n","plt.title(\"Confusion Matrix\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":468},"id":"ufnCRmaJs5pw","executionInfo":{"status":"ok","timestamp":1720113847915,"user_tz":-330,"elapsed":984,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}},"outputId":"1e6eb3e1-20bc-42d4-8780-fcd56f38fa72"},"execution_count":44,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["print(classification_report(y_validation, predictions))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"anaAMymqs8XM","executionInfo":{"status":"ok","timestamp":1720113864745,"user_tz":-330,"elapsed":432,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}},"outputId":"c9a6740e-23cf-456e-8d4d-02549ab9402f"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.71      0.75      0.73        16\n","           1       0.73      0.69      0.71        16\n","\n","    accuracy                           0.72        32\n","   macro avg       0.72      0.72      0.72        32\n","weighted avg       0.72      0.72      0.72        32\n","\n"]}]},{"cell_type":"code","source":["\n","# Predicting code for an image\n","from tensorflow.keras.preprocessing import image\n","# Please replace the brackets below with the location of your image which need to predict\n","img_path = '/content/drive/MyDrive/AIClub_AP_Damacharla_Harika/Project/Dataset/Test/lightning/2107.jpg'\n","img = image.load_img(img_path, target_size=IMG_SIZE)\n","img_array = image.img_to_array(img)\n","img_batch = np.expand_dims(img_array, axis=0)\n","img_preprocessed = preprocess_input(img_batch)\n","prediction = model.predict(img_preprocessed)\n","print(prediction)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jllv5Xaas_YX","executionInfo":{"status":"ok","timestamp":1720113976563,"user_tz":-330,"elapsed":1676,"user":{"displayName":"Harika Damacherla","userId":"12248088744166140082"}},"outputId":"c39f06fb-4460-4018-c355-b7d6562fffe7"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 1s 1s/step\n","[[0.56532085 0.43467924]]\n"]}]}]}